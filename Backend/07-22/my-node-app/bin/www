#!/usr/bin/env node

/**
 * Module dependencies.
 */

//- www.js 모듈은 노드 백엔드 어플리케이션 웹 서버를 통해 서비스 하기 위한
//  서버 환경을 구성해주는 역할
//- www.js는 실제 서비스 기능과는 상관없이 노드 백엔드 앱을 웹서버를 통해
//  서비스 할 수 있는 환경만을 제공
var app = require('../app');
var debug = require('debug')('my-node-app:server');

//노드 프레임워크에서 제공하는 웹서버 기능
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

//지정한 특정 포트를 통해 노드 앱을 서비스함
//기본 : 3000번 포트
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

//http 객체를 통해 웹 서버 객체를 생성함.
//웹 서버 객체에 app(노드 백엔드 어플리케이션) 추가
var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);

//server 객체 error 이벤트가 발생하면 onError 이벤트 처리(핸들러) 함수 호출하여 처리
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
